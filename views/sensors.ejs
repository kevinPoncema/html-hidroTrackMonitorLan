<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Sensores</title>
  <!-- Bootstrap CSS -->
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
  <!-- Bootstrap Icons -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/intro.js/minified/introjs.min.css">

  <style>
  .carousel-control-prev-icon,
    .carousel-control-next-icon {
      background-color: rgba(0, 0, 0, 0.5); /* Opcional, para dar un fondo oscuro */
      border-radius: 50%; /* Opcional, para hacer los íconos redondeados */
    }

    .introjs-overlay {
      background-color: rgba(0, 0, 0, 0.5) !important;
    }

    .introjs-tooltip {
      background-color: #333 !important;
      color: #fff !important;
      border-radius: 5px !important;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2) !important;
      width: 600px !important; /* Ancho fijo */
      max-width: 80% !important; /* Ancho máximo en porcentaje */
    }

    .introjs-tooltiptext {
      font-size: 16px;
    }

    .introjs-helperLayer {
      background-color: rgba(0, 0, 0, 0.3) !important;
    }

    .customTooltip img, .customTooltip video {
      max-width: 100%;
      margin-top: 10px;
    }

    canvas {
      max-width: 100%;
      height: auto;
    }
  </style>
</head>
<body>
  <div class="container mt-4">
    <h1 class="text-center mb-4">Sensores de <%= userName %></h1>
    <h2 id="consumoActual" class="text-center mb-4">Consumo de hoy: 0%</h2>
    <div id="sensorCarousel" class="carousel slide" data-ride="carousel">
      <div id="pipi2">
      <div class="carousel-inner" id="mycarusel">
        <% sensors.forEach((sensor, index) => { %>
          <div class="carousel-item <%= index === 0 ? 'active' : '' %>">
            <div class="card">
              <div class="card-body text-center">
                <% if(sensor.tipo_sen === '1') { %>
                  <i class="bi bi-door-closed" style="font-size: 2rem;"></i>
                  <h5 class="card-title mt-3"><%= sensor.nombre_sen %></h5>
                  <p class="card-text">
                    <strong>Descripción:</strong> <%= sensor.descripcion_sen %><br>
                    <strong>Estado:</strong> <strong id="estado<%= sensor.id_sen %>"><%= sensor.estado_sen === 1 ? 'ACTIVO' : 'DESACTIVADO' %></strong><br>
                    <strong>Código:</strong> <%= sensor.codigo_sen %><br>
                    <strong>ID:</strong> <%= sensor.id_sen %>
                  </p>
                  <div class="form-row mb-3">
                    <div class="col">
                      <input type="datetime-local" id="tiempo<%= sensor.id_sen %>" class="form-control" required>
                    </div>
                    <div class="col">
                      <select id="opc<%= sensor.id_sen %>" class="form-control" required>
                        <option value="1">Abrir</option>
                        <option value="2">Cerrar</option>
                      </select>
                    </div>
                  </div>
                  <div class="btn-group" role="group">
                    <button class="btn btn-danger" id="btnActu<%= sensor.id_sen %>" value="<%= sensor.estado_sen %>" onclick="cerrarSensor('<%= sensor.id_sen %>')">
                      <%= sensor.estado_sen === 1 ? 'Cerrar' : 'Abrir' %>
                    </button>
                    <button class="btn btn-primary" onclick="programar('<%= sensor.id_sen %>')">Programar</button>
                  </div>
                <% } else if(sensor.tipo_sen === '2') { %>
                  <i class="bi bi-moisture" style="font-size: 2rem;"></i>
                  <h5 class="card-title mt-3"><%= sensor.nombre_sen %></h5>
                  <p class="card-text">
                    <strong>Descripción:</strong> <%= sensor.descripcion_sen %><br>
                    <strong>Estado:</strong> <%= sensor.estado_sen === 1 ? 'ACTIVO' : 'DESACTIVADO' %><br>
                    <strong>Código:</strong> <%= sensor.codigo_sen %><br>
                    <strong>ID:</strong> <%= sensor.id_sen %>
                  </p>
                  <a href="/renderMysen/<%= sensor.id_sen %>" class="btn btn-info mt-3">Mostrar Más</a>
                <% } %>
              </div>
            </div>
          </div>
        <% }) %>
      </div>
      <a class="carousel-control-prev" href="#sensorCarousel" role="button" data-slide="prev">
        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
        <span class="sr-only">Anterior</span>
      </a>
      <a class="carousel-control-next" href="#sensorCarousel" role="button" data-slide="next">
        <span class="carousel-control-next-icon" aria-hidden="true"></span>
        <span class="sr-only">Siguiente</span>
      </a>
    </div>
  </div>

  </div>

  <div class="row">
    <div class="col-md-6 mb-4">
      <h3 class="text-center">Gráfica de Consumo Semanal</h3>
      <canvas id="graficaBarra"></canvas>
    </div>

    <div class="col-md-6 mb-4">
      <h3 class="text-center">Predicción de Consumo Mensual</h3>
      <canvas id="predictGrafica"></canvas>
    </div>
  </div>
</div>
  <!-- Bootstrap JS, Popper.js, Bootstrap Bundle (includes Popper) -->
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
  <script src="/socket.io/socket.io.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/intro.js/minified/intro.min.js"></script>
  <!-- Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    // Maneja la comunicación en tiempo real
    const socket = io();

    // Función para cerrar o abrir el sensor y enviar un mensaje al servidor
    function cerrarSensor(sensorId) {
      const btn = document.getElementById("btnActu"+sensorId);
      const preEstado = btn.value;
      socket.emit('actualizarEstado', sensorId, preEstado);      
      if (preEstado == 1) {
        btn.innerText = "Abrir";
        document.getElementById("estado"+sensorId).innerText = "DESACTIVADO";
        btn.value = 2;
      } else {
        btn.innerText = "Cerrar";
        document.getElementById("estado"+sensorId).innerText = "ACTIVO";
        btn.value = 1;
      }
    } 

    // Función para programar una acción
    function programar(sensorId) {
      console.log("Sí");
      const tiempo = document.getElementById("tiempo"+sensorId).value;
      const accion = document.getElementById("opc"+sensorId).value;
      console.log(accion)
      // Verificar si se proporcionó la fecha y hora
      if (!tiempo) {
        alert('Por favor, selecciona una fecha y hora.');
        return;
      }
      // Obtener la fecha y hora actual
      const ahora = new Date();
      // Convertir tiempo a objeto Date
      const fechaHoraSeleccionada = new Date(tiempo);
      // Verificar si la fecha y hora seleccionada es mayor que la fecha y hora actual
      if (fechaHoraSeleccionada <= ahora) {
        alert('La fecha y hora seleccionada debe ser mayor que la fecha y hora actual.');
        return;
      }
      // Emitir evento de socket para programar la acción
      socket.emit('programarAccion', { date: fechaHoraSeleccionada, sensorId, opc:accion });
    }

    socket.on("sendMsg", (data) => {
      const { msg, ui } = data;
      if (ui === "main") {
        alert(msg);
      }
    });

    socket.on('actualizarConsumo2', (consumoActual) => {
      document.getElementById("consumoActual").innerText = "Consumo de hoy: " + consumoActual + "%";
    });

    socket.on('reloadData', (sensorId) => {
      location.reload(true);
    });

    // Carga y configura la gráfica
    document.addEventListener('DOMContentLoaded', function() {
      const labels = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
      const values2 = <%= valuesData %>;
      const values3 = <%= promediosDiarios %>;//datos de la predicon mensual 
      const lbl2 = [//labels de la predicion mensual
            '1',  '2',  '3',  '4',  '5',  '6',
            '7',  '8',  '9',  '10', '11', '12',
            '13', '14', '15', '16', '17', '18',
            '19', '20', '21', '22', '23', '24',
            '25', '26', '27', '28', '29', '30'
          ]
      
      const ctx = document.getElementById('graficaBarra').getContext('2d');
      new Chart(ctx, {
        type: 'bar',
        data: {
          labels: labels,
          datasets: [{
            label: 'Consumo Semanal',
            data: values2,
            backgroundColor: 'rgba(54, 162, 235, 0.5)',
            borderColor: 'rgba(54, 162, 235, 1)',
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: true,
          scales: {
            yAxes: [{
              ticks: {
                beginAtZero: true
              }
            }]
          }
        }
      });

      //grafica 2
      const ctx2 = document.getElementById('predictGrafica').getContext('2d');
        const consumoMensualChart = new Chart(ctx2, {
            type: 'line', // Tipo de gráfico de área
            data: {
                labels: lbl2,
                datasets: [{
                    label: 'Consumo',
                    data: values3,
                    backgroundColor: 'rgba(75, 192, 192, 0.2)', // Color de fondo del área
                    borderColor: 'rgba(75, 192, 192, 1)', // Color del borde de la línea
                    borderWidth: 1,
                    fill: true // Rellena el área bajo la línea
                }]
            },
            options: {
                responsive: true,
                scales: {
                    x: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Día del Mes'
                        }
                    },
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Consumo'
                        }
                    }
                }
            }
        });

      
      

      if (!localStorage.getItem('tourCompleted')) {
      var intro = introJs();
      intro.setOptions({
        steps: [
          {
            element: '#bottom-center',
            intro: `
              <h3>Lista De Sensores y LLaves</h3>
                  <img src="/img/lista.gif" alt="Ejemplo de imagen">
              <p>Aquí puedes ver una lista de sensores (medidores) y válvulas (para cerrar o abrir llaves). Puedes usar las flechas para desplazarte entre los diferentes sensores.</p>
          
            `,
            tooltipPosition: 'bottom'
          },
          {
            element: '#bottom-center',
            intro: `
              <h3>Abrir y Cerrar Llaves</h3>
                  <img src="/img/lista.gif" alt="Ejemplo de imagen">
              <p>Desplázate con las flechitas hasta la válvula que quieras cerrar o abrir y oprime el botón rojo que dice "Cerrar" o "Abrir", según el estado de la válvula. Al hacer clic en el botón, en cuestión de segundos, la válvula se cerrará o abrirá..</p>
          
            `,
            tooltipPosition: 'bottom'
          },
          {
          element: '#bottom-center',
          intro: `
            <h3>Programar Cierre</h3>
            <img src="/img/lista.gif" alt="Ejemplo de imagen">
            <p>Desplázate con las flechitas hasta la válvula que quieras cerrar o abrir y oprime el botón rojo que dice "Cerrar" o "Abrir", según el estado de la válvula. Al hacer clic en el botón, en cuestión de segundos, la válvula se cerrará o abrirá.</p>
          `,
          tooltipPosition: 'bottom'
        },
        {
          element: '#bottom-center',
          intro: `
            <h3>Ver Datos Detallados</h3>
            <img src="/img/lista.gif" alt="Ejemplo de imagen">
            <p>Desplázate con las flechitas hasta el medidor que deseas observar y haz clic en el botón "Mostrar Más". Esto te llevará a una pantalla con gráficos detallados que muestran información más específica sobre el medidor seleccionado.</p>
          `,
          tooltipPosition: 'bottom'
        },
        {
        element: '#graficaBarra',
        intro: `
          <h3>Gráfica de Consumo General</h3>
          <p>En esta sección puedes observar un gráfico de consumo general de toda la semana. La gráfica muestra cómo ha variado el consumo a lo largo de los días, proporcionándote una visión general de la tendencia semanal.</p>
        `,
        tooltipPosition: 'bottom'
        },{
        element: '#predictGrafica',
        intro: `
          <h3>Gráfica de Consumo General</h3>
          <p>En esta sección, podrás observar una gráfica de  lo que se espera que se consuma  el proximo mes..</p>
        `,
        tooltipPosition: 'bottom'
        }


        ],
        showStepNumbers: true,
        exitOnOverlayClick: false,
        showBullets: false,
        tooltipClass: 'customTooltip',
        nextLabel: 'Siguiente',
        prevLabel: 'Anterior',
        doneLabel: 'Finalizar'
      });
      intro.start();
      intro.oncomplete(function() {
            localStorage.setItem('tour1Completed', true);
        });

        intro.onexit(function() {
            localStorage.setItem('tour1Completed', true);
        });

      }
      

    });

    // Mensaje de prueba
    socket.emit('message', 'Hola desde el cliente');
  </script>
</body>
</html>
