<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sensor Data</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/intro.js/minified/introjs.min.css">

    <style>
        /* Estilos adicionales para ajustar el tamaño de las gráficas */
        canvas {
            max-width: 100%;
            height: auto;
        }
        .introjs-overlay {
            background-color: rgba(0, 0, 0, 0.5) !important;
          }
      
          .introjs-tooltip {
            background-color: #333 !important;
            color: #fff !important;
            border-radius: 5px !important;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2) !important;
            width: 600px !important; /* Ancho fijo */
            max-width: 80% !important; /* Ancho máximo en porcentaje */
          }
      
          .introjs-tooltiptext {
            font-size: 16px;
          }
      
          .introjs-helperLayer {
            background-color: rgba(0, 0, 0, 0.3) !important;
          }
      
          .customTooltip img, .customTooltip video {
            max-width: 100%;
            margin-top: 10px;
    </style>
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Sensor Data</h1>
        <div class="card mb-4">
            <div class="card-header">
                Información del Sensor
            </div>
            <div class="card-body" id="infoSen">
                <h5 class="card-title" id="sensorName"></h5>
                <p class="card-text" id="sensorDescription"></p>
                <p><strong>ID:</strong> <span id="sensorID"></span></p>
                <p><strong>Tipo:</strong> <span id="sensorType"></span></p>
                <p><strong>Código:</strong> <span id="sensorCode"></span></p>
                <p><strong>Estado:</strong> <span id="sensorStatus"></span></p>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6 mb-4">
                <h3>Consumo Diario</h3>
                <canvas id="barChart"></canvas>
            </div>
            <div class="col-md-6 mb-4">
                <h3>Consumo por Hora</h3>
                <canvas id="lineChart"></canvas>
            </div>

            <div class="col-md-6 mb-4">
                <h3>grafica de Consumo Mensual</h3>
                <canvas id="ConsumoMensual"></canvas>
            </div>

            <div class="col-md-6 mb-4">
                <h3>Predicion de Consumo Mensual</h3>
                <canvas id="predictGrafica"></canvas>
            </div>
        </div>
    </div>
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/intro.js/minified/intro.min.js"></script>
    <script>
document.addEventListener('DOMContentLoaded', async () => {
    const senID = '<%= senID %>';
    const socket = io();
    
    // Define tus gráficos fuera del fetch para que puedan ser actualizados después
    let barChart, lineChart, consumoMensualChart, predictGrafica;

    async function fetchDataAndUpdateCharts() {
        try {
            const response = await fetch(`/moreData/${senID}`);
            const data = await response.json();

            // Actualiza la información del sensor
            const sensorData = data.sensorData.rows[0];
            document.getElementById('sensorName').textContent = `Nombre: ${sensorData.nombre_sen}`;
            document.getElementById('sensorDescription').textContent = `Descripción: ${sensorData.descripcion_sen}`;
            document.getElementById('sensorID').textContent = sensorData.id_sen;
            document.getElementById('sensorType').textContent = sensorData.tipo_sen;
            document.getElementById('sensorCode').textContent = sensorData.codigo_sen;
            document.getElementById('sensorStatus').textContent = sensorData.estado_sen == 1 ? 'Activo' : 'Inactivo';

            // Actualiza los gráficos
            barChart.data.labels = data.labelsData;
            barChart.data.datasets[0].data = data.valuesData;
            barChart.update();

            lineChart.data.labels = data.labelsDataLinea;
            lineChart.data.datasets[0].data = data.valuesDataLinea;
            lineChart.update();

            consumoMensualChart.data.labels = data.diasDelMes;
            consumoMensualChart.data.datasets[0].data = data.ConsumoDiarios.map(value => value === null ? 0 : value);
            consumoMensualChart.update();

            predictGrafica.data.labels = data.diasDelMes;
            predictGrafica.data.datasets[0].data = data.promediosDiarios;
            predictGrafica.update();

        } catch (error) {
            console.error('Error fetching sensor data:', error);
        }
    }

    // Inicializa las gráficas al cargar la página
    const barCtx = document.getElementById('barChart').getContext('2d');
    const lineCtx = document.getElementById('lineChart').getContext('2d');
    const consumoMensualCtx = document.getElementById('ConsumoMensual').getContext('2d');
    const predictGraficaCtx = document.getElementById('predictGrafica').getContext('2d');

    barChart = new Chart(barCtx, {
        type: 'bar',
        data: {
            labels: [],
            datasets: [{
                label: 'Consumo Diario',
                data: [],
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    lineChart = new Chart(lineCtx, {
        type: 'line',
        data: {
            labels: [],
            datasets: [{
                label: 'Consumo por Hora',
                data: [],
                backgroundColor: 'rgba(153, 102, 255, 0.2)',
                borderColor: 'rgba(153, 102, 255, 1)',
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    consumoMensualChart = new Chart(consumoMensualCtx, {
        type: 'line',
        data: {
            labels: [],
            datasets: [{
                label: 'Consumo Mensual',
                data: [],
                backgroundColor: 'rgba(75, 192, 75, 0.2)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1,
                fill: true
            }]
        },
        options: {
            responsive: true,
            scales: {
                x: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Día del Mes'
                    }
                },
                y: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Consumo'
                    }
                }
            }
        }
    });

    predictGrafica = new Chart(predictGraficaCtx, {
        type: 'line',
        data: {
            labels: [],
            datasets: [{
                label: 'Predicción de Consumo',
                data: [],
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1,
                fill: true
            }]
        },
        options: {
            responsive: true,
            scales: {
                x: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Día del Mes'
                    }
                },
                y: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Consumo'
                    }
                }
            }
        }
    });

    // Llama a la función fetchDataAndUpdateCharts al cargar la página
    await fetchDataAndUpdateCharts();

    // Escucha el evento 'reloadData' del socket
    socket.on('reloadData', async (sensorId) => {
        if (senID == sensorId) {
            await fetchDataAndUpdateCharts();
        }
    });
});
</script>

</body>
</html>

